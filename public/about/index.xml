<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Abouts on Robert</title>
    <link>http://robhar.com/about/</link>
    <description>Recent content in Abouts on Robert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Jun 2016 14:52:23 +0200</lastBuildDate>
    <atom:link href="http://robhar.com/about/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About</title>
      <link>http://robhar.com/about/</link>
      <pubDate>Fri, 03 Jun 2016 14:52:23 +0200</pubDate>
      
      <guid>http://robhar.com/about/</guid>
      <description>&lt;p&gt;Hello, My name is Robert den Harink. I&amp;rsquo;m a software developer from the Netherlands. &lt;br /&gt; I keep this blog to remember things and share interesting rubbish for your entertainment.&lt;/p&gt;

&lt;p&gt;I like functional programming, Linux, graphic design, creating funky music with Ableton/vintage-organs and traveling in my old &amp;lsquo;krankenwagen&amp;rsquo; â€” that&amp;rsquo;s german for ambulance.&lt;/p&gt;

&lt;p&gt;Currently i work for a company that builds software for the Dutch government. I take care of architecture
and security. I&amp;rsquo;m also available as freelancer&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you have questions/comments or you just want to say hi, drop me a message and i&amp;rsquo;ll get back at you.&lt;/p&gt;

&lt;p&gt;To generate my contact information please run one of the scripts below&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Haskell&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- Generate contact information for Robert den Harink
-- http://www.robhar.com

import Data.Char (ord, chr)

crypt :: (Char -&amp;gt; Char -&amp;gt; Int) -&amp;gt; String -&amp;gt; String -&amp;gt; String
crypt f key = map toLetter . zipWith f (cycle key)
    where toLetter = chr . (+) (ord &#39;.&#39;)

enc :: Char -&amp;gt; Char -&amp;gt; Int
enc k c = (base k + base c) `mod` 77
    where base c = (ord c) - (ord &#39;.&#39;)

dec :: Char -&amp;gt; Char -&amp;gt; Int
dec k c = (base c - base k) `mod` 77
    where base c = (ord c) - (ord &#39;.&#39;)

encrypt = crypt enc
decrypt = crypt dec

main :: IO()
main = putStrLn $ decrypt &amp;quot;secret&amp;quot; &amp;quot;jYJ\\\\m8\\WYRZjeKfWuumjtmx.imt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Go&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;// Generate contact information for Robert den Harink
// http://www.robhar.com
package main

import &amp;quot;fmt&amp;quot;

const (
    start = &#39;.&#39;
    end   = &#39;z&#39;
)

type key string

func main() {
    k := key(&amp;quot;secret&amp;quot;)
    decrypted := k.decrypt([]byte(&amp;quot;kZK]]n9]XZS[keLgXuumjtmx/imt&amp;quot;))
    fmt.Println(string(decrypted))
}

func (k key) encrypt(tx []byte) []byte {
    ct := tx
    for i, c := range ct {
            ct[i] = start + (c-start+k[i%len(k)]-start)%(end-start)
    }

    return ct
}

func (k key) decrypt(tx []byte) []byte {
    pt := tx
    for i, c := range pt {
            pt[i] = start + (c-k[i%len(k)]+(end-start))%(end-start)
    }

    return pt
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>